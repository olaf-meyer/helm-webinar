apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: nodejs-mongodb-example
  template: nodejs-mongodb-example
message: |-
  The following service(s) have been created in your project: {{ .Values.nodejs.name }}, {{ .Values.nodejs.database.service_name}}.

  For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/nodejs-ex/blob/master/README.md.
metadata:
  annotations:
    description: |-
      An example Node.js application with a MongoDB database. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/nodejs-ex/blob/master/README.md.

      WARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.
    iconClass: icon-nodejs
    openshift.io/display-name: Node.js + MongoDB (Ephemeral)
    openshift.io/documentation-url: https://github.com/sclorg/nodejs-ex
    openshift.io/long-description: This template defines resources needed to develop a NodeJS application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
    samples.operator.openshift.io/version: 4.7.19
    tags: quickstart,nodejs,hidden
    template.openshift.io/bindable: "false"
  labels:
    samples.operator.openshift.io/managed: "true"
  name: nodejs-mongodb-example
  namespace: openshift
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: {{ .Values.nodejs.name }}
  stringData:
    {{ if .Values.nodejs.database.admin_password }}
    database-admin_password:  {{ .Values.rails.database.admin_password }}
    {{ else }}
    database-admin_password: {{ randAlphaNum 16 }}
    {{ end }}
    {{ if .Values.nodejs.database.password }}
    database-password:  {{ .Values.rails.database.password }}
    {{ else }}
    database-password: {{ randAlphaNum 16 }}
    {{ end }}
    database-user: {{ .Values.nodejs.database.user}}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "{{ .Values.nodejs.database.service_name}}", "kind": "Service"}]'
    name: {{ .Values.nodejs.name }}
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: {{ .Values.nodejs.name }}
- apiVersion: v1
  kind: Route
  metadata:
    name: {{ .Values.nodejs.name }}
  spec:
    to:
      kind: Service
      name: {{ .Values.nodejs.name }}
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: {{ .Values.nodejs.name }}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
      template.alpha.openshift.io/wait-for-ready: "true"
    name: {{ .Values.nodejs.name }}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: {{ .Values.nodejs.name }}:latest
    postCommit:
      script: npm test
    source:
      contextDir: {{ .Values.nodejs.git.context}}
      git:
      ref: {{ .Values.nodejs.git.source_repository_ref}}
      uri: {{ .Values.nodejs.git.source_repository_url}}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: NPM_MIRROR
          value: {{ .Values.nodejs.npm_mirror}}
        from:
          kind: ImageStreamTag
          name: nodejs:{{ .Values.nodejs.nodejs_version }}
          namespace: {{ .Values.nodejs.namespace }}
      type: Source
    triggers:
    - type: ImageChange
    - type: ConfigChange
    - github:
    {{ if .Values.rails.github_webhook_secret }}
        secret:  {{ .Values.rails.github_webhook_secret }}
    {{ else }}
        secret: {{ randAlphaNum 40 }}
    {{ end }}
      type: GitHub
    - generic:
    {{ if .Values.rails.github_webhook_secret }}
        secret:  {{ .Values.rails.github_webhook_secret }}
    {{ else }}
        secret: {{ randAlphaNum 40 }}
    {{ end }}
      type: Generic
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: "true"
    name: {{ .Values.nodejs.name }}
  spec:
    replicas: 1
    selector:
      name: {{ .Values.nodejs.name }}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: {{ .Values.nodejs.name }}
        name: {{ .Values.nodejs.name }}
      spec:
        containers:
        - env:
          - name: DATABASE_SERVICE_NAME
            value: {{ .Values.nodejs.database.service_name}}
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: {{ .Values.nodejs.name }}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: {{ .Values.nodejs.name }}
          - name: MONGODB_DATABASE
            value: {{ .Values.nodejs.database.name}}
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin_password
                name: {{ .Values.nodejs.name }}
          image: ' '
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 3
          name: nodejs-mongodb-example
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 3
            timeoutSeconds: 3
          resources:
            limits:
              memory: {{ .Values.nodejs.memory_limit }}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - nodejs-mongodb-example
        from:
          kind: ImageStreamTag
          name: {{ .Values.nodejs.name }}:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: {{ .Values.nodejs.database.service_name}}
  spec:
    ports:
    - name: mongodb
      port: 27017
      targetPort: 27017
    selector:
      name: {{ .Values.nodejs.database.service_name}}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: "true"
    name: {{ .Values.nodejs.database.service_name}}
  spec:
    replicas: 1
    selector:
      name: {{ .Values.nodejs.database.service_name}}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: {{ .Values.nodejs.database.service_name}}
        name: {{ .Values.nodejs.database.service_name}}
      spec:
        containers:
        - env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: {{ .Values.nodejs.name }}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: {{ .Values.nodejs.name }}
          - name: MONGODB_DATABASE
            value: {{ .Values.nodejs.database.name}}
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin_password
                name: {{ .Values.nodejs.name }}
          image: ' '
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          ports:
          - containerPort: 27017
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval="quit()"
            initialDelaySeconds: 3
            timeoutSeconds: 1
          resources:
            limits:
              memory: {{ .Values.nodejs.database.mongodb_memory_limit}}
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: {{ .Values.nodejs.database.service_name}}-data
        volumes:
        - emptyDir:
            medium: ""
          name: {{ .Values.nodejs.database.service_name}}-data
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:{{ .Values.nodejs.database.mongodb_version}}
          namespace: {{ .Values.nodejs.namespace }}
      type: ImageChange
    - type: ConfigChange
parameters:
- description: The name assigned to all of the frontend objects defined in this template.
  displayName: Name
  name: NAME
  required: true
  value: nodejs-mongodb-example
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: openshift
- description: Version of NodeJS image to be used (10, 12, or latest).
  displayName: Version of NodeJS Image
  name: NODEJS_VERSION
  required: true
  value: "12"
- description: Version of MongoDB image to be used (3.6 or latest).
  displayName: Version of MongoDB Image
  name: MONGODB_VERSION
  required: true
  value: "3.6"
- description: Maximum amount of memory the Node.js container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Maximum amount of memory the MongoDB container can use.
  displayName: Memory Limit (MongoDB)
  name: MEMORY_MONGODB_LIMIT
  required: true
  value: 512Mi
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/sclorg/nodejs-ex.git
- description: Set this to a branch name, tag or other ref of your repository if you are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
- description: Set this to the relative path to your project if it is not in the root of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: The exposed hostname that will route to the Node.js service, if left blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
- description: Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mongodb
- description: Username for MongoDB user that will be used for accessing the database.
  displayName: MongoDB Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: DATABASE_USER
- description: Password for the MongoDB user.
  displayName: MongoDB Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_PASSWORD
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: sampledb
- description: Password for the database admin user.
  displayName: Database Administrator Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_ADMIN_PASSWORD
- description: The custom NPM mirror URL
  displayName: Custom NPM Mirror URL
  name: NPM_MIRROR
